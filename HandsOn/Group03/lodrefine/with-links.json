[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Number of Vehicles",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Number of Vehicles using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Grid Ref: Northing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Grid Ref: Northing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Grid Ref: Easting",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Grid Ref: Easting using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Age of Casualty",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Age of Casualty using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Reference Number",
    "expression": "value.toString()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Reference Number using expression value.toString()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Accident Date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Accident Date using expression value.toDate()"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Accident Date",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "T",
    "regex": false,
    "maxColumns": 2,
    "description": "Split column Accident Date by separator"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Time (24hr)",
    "expression": "grel:value.slice(2)",
    "onError": "set-to-blank",
    "newColumnName": "minutes",
    "columnInsertIndex": 7,
    "description": "Create column minutes at index 7 based on column Time (24hr) using expression grel:value.slice(2)"
  },
  {
    "op": "core/column-removal",
    "columnName": "Accident Date 2",
    "description": "Remove column Accident Date 2"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Time (24hr)",
    "expression": "grel:slice(value, 0,2)",
    "onError": "set-to-blank",
    "newColumnName": "Hour (24hr)",
    "columnInsertIndex": 6,
    "description": "Create column Hour (24hr) at index 6 based on column Time (24hr) using expression grel:slice(value, 0,2)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Hour (24hr)",
    "expression": "grel:value.toDate('K')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Hour (24hr) using expression grel:value.toDate('K')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Hour (24hr)",
    "expression": "grel:value.datePart('hour')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Hour (24hr) using expression grel:value.datePart('hour')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "minutes",
    "expression": "grel:value.toDate('m')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column minutes using expression grel:value.toDate('m')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "minutes",
    "expression": "grel:value.datePart('min')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column minutes using expression grel:value.datePart('min')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Accident Date 1",
    "expression": "grel:value.toDate('yyyy-mm-dd')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Accident Date 1 using expression grel:value.toDate('yyyy-mm-dd')"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Accident Date 1",
    "expression": "grel:slice(value, 0,10)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Accident Date 1 using expression grel:slice(value, 0,10)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Accident Date 1",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Accident Date 1 using expression value.toDate()"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Grid Ref: Northing",
    "newColumnName": "Northing",
    "description": "Rename column Grid Ref: Northing to Northing"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Grid Ref: Easting",
    "newColumnName": "Easting",
    "description": "Rename column Grid Ref: Easting to Easting"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Accident Date 1",
    "newColumnName": "Accident Date",
    "description": "Rename column Accident Date 1 to Accident Date"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "1st Road Class & No",
    "newColumnName": "Road Class & No",
    "description": "Rename column 1st Road Class & No to Road Class & No"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Road Class & No",
    "newColumnName": "Road Number",
    "description": "Rename column Road Class & No to Road Number"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Type of Vehicle",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Motorcycle Motorcycle over 500cc0cc to 12Motorcycle over 500cccc",
          "Motorcycle over 500cc",
          "Motorcycle 12Motorcycle over 500cccc to Motorcycle over 500cc00cc",
          "Motorcycle Motorcycle over 500cc0cc and under",
          "Motorcycle Motorcycle over 500cc0cc and under0",
          "Motorcycle Motorcycle over 500cc0cc and underPedal cycle",
          "Motorcycle Motorcycle over 500cc0cc and underMotorcycle Motorcycle over 500cc0cc and under"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Motorcycle"
      },
      {
        "from": [
          "Pedal cycle",
          "Pedal cyclePedal cycle",
          "Pedal cycleCar",
          "Pedal cycle0"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Pedal cycle"
      },
      {
        "from": [
          "Car",
          "Car0",
          "Car7"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Car"
      },
      {
        "from": [
          "Taxi/Private hire car"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Taxi"
      },
      {
        "from": [
          "CarTaxi/Private hire car"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Taxi"
      }
    ],
    "description": "Mass edit cells in column Type of Vehicle"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Road Surface",
    "newColumnName": "Road Surface Condition",
    "description": "Rename column Road Surface to Road Surface Condition"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Type of Vehicle",
    "config": {
      "mode": "standard-service",
      "service": "https://tools.wmflabs.org/openrefine-wikidata/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q334166",
        "name": "mode of transport"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column Type of Vehicle to type Q334166"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Type of Vehicle",
    "similarValue": "Car",
    "judgment": "matched",
    "match": {
      "id": "Q1420",
      "name": "car",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item car (Q1420) for cells containing \"Car\" in column Type of Vehicle"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Type of Vehicle: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Type of Vehicle",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Type of Vehicle",
    "similarValue": "Taxi",
    "judgment": "matched",
    "match": {
      "id": "Q82650",
      "name": "taxi",
      "types": [
        ""
      ],
      "score": 50
    },
    "shareNewTopics": false,
    "description": "Match item taxi (Q82650) for cells containing \"Taxi\" in column Type of Vehicle"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Type of Vehicle: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Type of Vehicle",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Type of Vehicle",
    "similarValue": "Motorcycle",
    "judgment": "matched",
    "match": {
      "id": "Q34493",
      "name": "motorcycle",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item motorcycle (Q34493) for cells containing \"Motorcycle\" in column Type of Vehicle"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Sex of Casualty",
    "config": {
      "mode": "standard-service",
      "service": "https://tools.wmflabs.org/openrefine-wikidata/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q48277",
        "name": "gender"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column Sex of Casualty to type Q48277"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Accident Date",
    "expression": "grel:value + cells['Time (24hr)'] + cells['minutes']",
    "onError": "set-to-blank",
    "newColumnName": "Datetime",
    "columnInsertIndex": 5,
    "description": "Create column Datetime at index 5 based on column Accident Date using expression grel:value + cells['Time (24hr)'] + cells['minutes']"
  },
  {
    "op": "core/column-removal",
    "columnName": "Datetime",
    "description": "Remove column Datetime"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Accident Date",
    "expression": "grel:(value.toString('yyyy-MM-DD') + '-'+cells['Time (24hr)'].value[0] + cells['Time (24hr)'].value[1] + ':'+cells['Time (24hr)'].value[2] + cells['Time (24hr)'].value[3]).toDate('yyyy-MM-DD-hh:mm')",
    "onError": "set-to-blank",
    "newColumnName": "DateTime",
    "columnInsertIndex": 5,
    "description": "Create column DateTime at index 5 based on column Accident Date using expression grel:(value.toString('yyyy-MM-DD') + '-'+cells['Time (24hr)'].value[0] + cells['Time (24hr)'].value[1] + ':'+cells['Time (24hr)'].value[2] + cells['Time (24hr)'].value[3]).toDate('yyyy-MM-DD-hh:mm')"
  },
  {
    "op": "core/column-removal",
    "columnName": "Accident Date",
    "description": "Remove column Accident Date"
  },
  {
    "op": "core/column-removal",
    "columnName": "Time (24hr)",
    "description": "Remove column Time (24hr)"
  },
  {
    "op": "core/column-removal",
    "columnName": "Hour (24hr)",
    "description": "Remove column Hour (24hr)"
  },
  {
    "op": "core/column-removal",
    "columnName": "minutes",
    "description": "Remove column minutes"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Easting",
    "expression": "jython:int(value)",
    "onError": "set-to-blank",
    "newColumnName": "Longitude",
    "columnInsertIndex": 2,
    "description": "Create column Longitude at index 2 based on column Easting using expression jython:int(value)"
  },
  {
    "op": "core/column-removal",
    "columnName": "Longitude",
    "description": "Remove column Longitude"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Easting",
    "urlExpression": "grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting']+\"&northing=\"+cells['northing']",
    "onError": "set-to-blank",
    "newColumnName": "lat/lon",
    "columnInsertIndex": 2,
    "delay": 200,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column lat/lon at index 2 by fetching URLs based on column Easting using expression grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting']+\"&northing=\"+cells['northing']"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/lon",
    "description": "Remove column lat/lon"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Easting",
    "urlExpression": "grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value",
    "onError": "set-to-blank",
    "newColumnName": "lat/lon",
    "columnInsertIndex": 2,
    "delay": 200,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column lat/lon at index 2 by fetching URLs based on column Easting using expression grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/lon",
    "description": "Remove column lat/lon"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Easting",
    "urlExpression": "grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value",
    "onError": "set-to-blank",
    "newColumnName": "lat/long",
    "columnInsertIndex": 2,
    "delay": 500,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column lat/long at index 2 by fetching URLs based on column Easting using expression grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/long",
    "description": "Remove column lat/long"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Northing",
    "expression": "grel:method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value",
    "onError": "set-to-blank",
    "newColumnName": "lat/lon_parameters",
    "columnInsertIndex": 3,
    "description": "Create column lat/lon_parameters at index 3 based on column Northing using expression grel:method=BNGtoLatLng&easting=\"+cells['easting'].value+\"&northing=\"+cells['northing'].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/lon_parameters",
    "description": "Remove column lat/lon_parameters"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Northing",
    "expression": "grel:\"method=BNGtoLatLng&easting=\"+cells['Easting'].value+\"&northing=\"+cells['Northing'].value",
    "onError": "set-to-blank",
    "newColumnName": "lat/lon_parameters",
    "columnInsertIndex": 3,
    "description": "Create column lat/lon_parameters at index 3 based on column Northing using expression grel:\"method=BNGtoLatLng&easting=\"+cells['Easting'].value+\"&northing=\"+cells['Northing'].value"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "lat/lon_parameters",
    "urlExpression": "grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?\"+value",
    "onError": "set-to-blank",
    "newColumnName": "lat/lon",
    "columnInsertIndex": 4,
    "delay": 200,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column lat/lon at index 4 by fetching URLs based on column lat/lon_parameters using expression grel:\"https://www.bgs.ac.uk/data/webservices/CoordConvert_LL_BNG.cfc?\"+value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "lat/lon",
    "expression": "jython:return value.split(\",\")[9].split(\":\")[1].split(\"}\")[0]",
    "onError": "set-to-blank",
    "newColumnName": "Latitude",
    "columnInsertIndex": 5,
    "description": "Create column Latitude at index 5 based on column lat/lon using expression jython:return value.split(\",\")[9].split(\":\")[1].split(\"}\")[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "lat/lon",
    "expression": "jython:return value.split(\",\")[4].split(\":\")[1].split(\"}\")[0]",
    "onError": "set-to-blank",
    "newColumnName": "Longitude",
    "columnInsertIndex": 5,
    "description": "Create column Longitude at index 5 based on column lat/lon using expression jython:return value.split(\",\")[4].split(\":\")[1].split(\"}\")[0]"
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Latitude",
    "urlExpression": "grel:\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+cells[\"Latitude\"].value+\",-\"+cells[\"Longitude\"].value+\"&key=AIzaSyBnchZOom660cYTra_mLJpIQcN_pD-ot5o\"",
    "onError": "set-to-blank",
    "newColumnName": "GeoCode",
    "columnInsertIndex": 7,
    "delay": 200,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column GeoCode at index 7 by fetching URLs based on column Latitude using expression grel:\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+cells[\"Latitude\"].value+\",-\"+cells[\"Longitude\"].value+\"&key=AIzaSyBnchZOom660cYTra_mLJpIQcN_pD-ot5o\""
  },
  {
    "op": "core/column-addition-by-fetching-urls",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "GeoCode",
          "expression": "value",
          "columnName": "GeoCode",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [],
          "selectBlank": true,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "Latitude",
    "urlExpression": "grel:\"http://www.mapquestapi.com/geocoding/v1/reverse?key=5squ5famKq71G4QSKpYHNeo9XVeAlW50&location=\"+cells['Latitude'].value+\",\"+cells['Longitude'].value+\"&includeRoadMetadata=true&includeNearestIntersection=true\"",
    "onError": "store-error",
    "newColumnName": "MapQuest_info",
    "columnInsertIndex": 7,
    "delay": 200,
    "cacheResponses": true,
    "httpHeadersJson": [
      {
        "name": "authorization",
        "value": ""
      },
      {
        "name": "user-agent",
        "value": "OpenRefine 3.2 [55c921b]"
      },
      {
        "name": "accept",
        "value": "*/*"
      }
    ],
    "description": "Create column MapQuest_info at index 7 by fetching URLs based on column Latitude using expression grel:\"http://www.mapquestapi.com/geocoding/v1/reverse?key=5squ5famKq71G4QSKpYHNeo9XVeAlW50&location=\"+cells['Latitude'].value+\",\"+cells['Longitude'].value+\"&includeRoadMetadata=true&includeNearestIntersection=true\""
  },
  {
    "op": "core/column-removal",
    "columnName": "GeoCode",
    "description": "Remove column GeoCode"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "MapQuest_info",
    "expression": "grel:value.parseJson().results[0].locations[0].street",
    "onError": "set-to-blank",
    "newColumnName": "StreetName",
    "columnInsertIndex": 8,
    "description": "Create column StreetName at index 8 based on column MapQuest_info using expression grel:value.parseJson().results[0].locations[0].street"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "MapQuest_info",
    "expression": "grel:value.parseJson().results[0].locations[0].adminArea6",
    "onError": "set-to-blank",
    "newColumnName": "Neighborhood",
    "columnInsertIndex": 8,
    "description": "Create column Neighborhood at index 8 based on column MapQuest_info using expression grel:value.parseJson().results[0].locations[0].adminArea6"
  },
  {
    "op": "core/column-removal",
    "columnName": "Neighborhood",
    "description": "Remove column Neighborhood"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "MapQuest_info",
    "expression": "grel:value.parseJson().results[0].locations[0].adminArea5\"",
    "onError": "set-to-blank",
    "newColumnName": "City",
    "columnInsertIndex": 8,
    "description": "Create column City at index 8 based on column MapQuest_info using expression grel:value.parseJson().results[0].locations[0].adminArea5\""
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "MapQuest_info",
    "expression": "grel:value.parseJson().results[0].locations[0].postalCode\"",
    "onError": "set-to-blank",
    "newColumnName": "PostalCode",
    "columnInsertIndex": 8,
    "description": "Create column PostalCode at index 8 based on column MapQuest_info using expression grel:value.parseJson().results[0].locations[0].postalCode\""
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "City",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Wakefield"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Wakefield"
      },
      {
        "from": [
          "Kirklees"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Kirklees"
      },
      {
        "from": [
          "Otley"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Otley"
      },
      {
        "from": [
          "Leeds"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Leeds"
      },
      {
        "from": [
          "Wetherby"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Wetherby"
      },
      {
        "from": [
          "Bradford"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Bradford"
      }
    ],
    "description": "Mass edit cells in column City"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "City",
    "config": {
      "mode": "standard-service",
      "service": "https://tools.wmflabs.org/openrefine-wikidata/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q515",
        "name": "city"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column City to type Q515"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "City",
    "similarValue": "Leeds",
    "judgment": "matched",
    "match": {
      "id": "Q39121",
      "name": "Leeds",
      "types": [
        "Q515",
        "Q7897276"
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Leeds (Q39121) for cells containing \"Leeds\" in column City"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "City",
          "expression": "value",
          "columnName": "City",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "Bradford",
                "l": "Bradford"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "City",
    "similarValue": "Bradford",
    "judgment": "matched",
    "match": {
      "id": "Q22905",
      "name": "Bradford",
      "types": [
        "Q515"
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Bradford (Q22905) for cells containing \"Bradford\" in column City"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "City",
          "expression": "value",
          "columnName": "City",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "Kirklees",
                "l": "Kirklees"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "City",
    "similarValue": "Kirklees",
    "judgment": "matched",
    "match": {
      "id": "Q1301336",
      "name": "Mirfield",
      "types": [
        "Q3957",
        "Q1115575"
      ],
      "score": 64
    },
    "shareNewTopics": false,
    "description": "Match item Mirfield (Q1301336) for cells containing \"Kirklees\" in column City"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/lon",
    "description": "Remove column lat/lon"
  },
  {
    "op": "core/column-removal",
    "columnName": "lat/lon_parameters",
    "description": "Remove column lat/lon_parameters"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Latitude",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Latitude using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Longitude",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Longitude using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Latitude",
    "expression": "jython:return round(value,6)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Latitude using expression jython:return round(value,6)"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Longitude",
    "expression": "jython:return round(value,6)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column Longitude using expression jython:return round(value,6)"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  },
  {
    "op": "core/column-removal",
    "columnName": "MapQuest_info",
    "description": "Remove column MapQuest_info"
  },
  {
    "op": "rdf-extension/save-rdf-schema",
    "description": "Save RDF schema skeleton",
    "schema": {
      "prefixes": [],
      "baseUri": null,
      "rootNodes": []
    }
  }
]